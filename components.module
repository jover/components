<?php

module_load_include('inc', 'components', 'components.fields');
module_load_include('inc', 'components', 'components.forms');

/**
 * @file
 * Module file for the components module.
 */

/**
 * Implements hook_help().
 */
function components_help($path, $arg) {
  switch ($path) {
    case 'admin/help#components':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      // @TODO: write help documentation
      return $output;
      break;
  }
}

/**
 * Implements hook_menu().
 */
function components_menu() {
  $items = array();
  
  // @TODO: access arguments 'view any $type component'
  $items['component/%component'] = array(
    'title' => 'View component',
    'page callback' => 'component_view',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
  );
  
  // @TODO: title callback with type name
  // @TODO: access arguments 'create any $type component'
  /*$items['component/add/%'] = array(
    'title' => 'Create new component',
    'page callback' => 'component_add',
    'page arguments' => array(2),
    'access arguments' => array('administer components'),
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );*/
  /*$items['component/add/%/%/%/%'] = array(
    'title' => 'Create new component',
    'page callback' => 'component_add',
    'page arguments' => array(2, 3, 4, 5),
    'access arguments' => array('administer components'),
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );*/
  $items['component/add/%/%/%/%ctools_js'] = array( // component/add/entity_type/entity_id/field_name/ajax
    'title' => 'Add component', // @TODO: title callback
    'page callback' => 'component_add',
    'page arguments' => array(2, 3, 4, 5),
    'access arguments' => array('administer components'),
    'type' => MENU_CALLBACK,
  );
  
  // @TODO: access arguments 'edit any $type component'
  $items['component/%component/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'component_edit',
    'page arguments' => array(1),
    'access arguments' => array('administer components'),
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );
  
  // @TODO: access arguments 'delete any $type component'
  $items['component/%component/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('component_form_delete_confirm', 1),
    'access arguments' => array('administer components'),
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
  );

  return $items;
}

/**
 * Implements hook_entity_info().
 */
function components_entity_info() {
  $entity_info = array();
  
  $entity_info['component'] = array(
    'label' => t('Component'),
    'entity class' => 'Component',
    'controller class' => 'EntityAPIController',
    'base table' => 'component',
    'fieldable' => TRUE,
    'view modes' => array(
      'rss' => array(
        'label' => t('RSS'),
        'custom settings' => FALSE,
      ),
    ),
    'entity keys' => array(
      'id' => 'cid',
      'bundle' => 'type',
    ),
    'bundles' => array(),
    'bundle keys' => array(
      'bundle' => 'type',
    ),
    'label callback' => 'entity_class_label',
    'uri callback' => 'entity_class_uri',
    'access callback' => 'component_access',
    'module' => 'components',
    'metadata controller class' => 'ComponentsMetadataController',
  );
  
  $entity_info['component_type'] = array(
    'label' => t('Component type'),
    'entity class' => 'ComponentType',
    'controller class' => 'EntityAPIControllerExportable', // EntityAPIController
    'base table' => 'component_type',
    'fieldable' => TRUE,
    'bundle of' => 'component',
    'exportable' => TRUE,
    'entity keys' => array(
      'id' => 'id',
      'name' => 'type',
      'label' => 'label',
    ),
    'access callback' => 'component_type_access',
    'module' => 'components',
    // Enable the entity API's admin UI.
    'admin ui' => array(
      'path' => 'admin/structure/component-types',
      'file' => 'components.admin.inc',
      'controller class' => 'ComponentTypeUIController',
    ),
  );
  
  return $entity_info;
}

/**
 * Implements hook_entity_info_alter().
 *
 * Use this hook to specify profile bundles to avoid a recursion, as loading
 * the profile types needs the entity info too.
 */
function components_entity_info_alter(&$entity_info) {
  foreach (components_get_types() as $type => $info) {
    $entity_info['component']['bundles'][$type] = array(
      'label' => $info->label,
      'admin' => array(
        'path' => 'admin/structure/component-types/manage/%component_type',
        'real path' => 'admin/structure/component-types/manage/' . $type,
        'bundle argument' => 4,
        'access arguments' => array('administer component types'),
      ),
    );
  }
}

/**
 * Implements hook_permission().
 */
function components_permission() {
   $permissions = array(
    'administer components' => array(
      'title' => t('Administer components'),
      'description' => t('Edit and view all components.')
    ),
    'administer component types' => array(
      'title' => t('Administer component types'), 
      'description' => t('Create and delete fields on components, and set their permissions.'),
    ),
  );
  
  // Generate per component type permissions.
  foreach (components_get_types() as $type) {
    $type_name = check_plain($type->type);
    $permissions += array(
      'create any ' . $type_name . ' component' => array(
        'title' => t('%type_name: Create any component', array('%type_name' => $type->label)),
      ),
      'edit any ' . $type_name . ' component' => array(
        'title' => t('%type_name: Edit any component', array('%type_name' => $type->label)),
      ),
      'delete any ' . $type_name . ' component' => array(
        'title' => t('%type_name: Delete any component', array('%type_name' => $type->label)),
      ),
      'view any ' . $type_name . ' component' => array(
        'title' => t('%type_name: View any component', array('%type_name' => $type->label)),
      ),
    );
  }
  
  return $permissions;
}

/***********************/
/* COMPONENT functions */
/***********************/

/**
 * Creates a new component object.
 * 
 * @param array $values
 */
function component_create(array $values) {
  return new Component($values);
}

/**
 * Saves a component object.
 * 
 * @param Component $component
 *   A component object.
 */
function component_save(Component $component) {
  return $component->save();
}

/**
 * Loads a component object.
 * 
 * @param integer $cid
 *   Integer specifying the component ID.
 * @param boolean $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return Component
 *   A component object or FALSE if it cannot be found.
 * 
 * @see component_load_multiple()
 */
function component_load($cid, $reset = FALSE) {
  $ids = isset($cid) ? array($cid) : array();
  $results = component_load_multiple($ids, array(), $reset);
  return $results ? reset($results) : FALSE;
}

/**
 * Loads multiple component objects.
 * 
 * @param array $cids
 *   An array of component IDs.
 * @param array $conditions
 *   An array of conditions to match against the {component} table.
 * @param boolean $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return Component[]
 *   An array of component objects.
 * 
 * @see entity_load()
 * @see component_load()
 */
function component_load_multiple($cids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('component', $cids, $conditions, $reset);
}

/**
 * Deletes a component object.
 * 
 * @param integer $cid
 *   Integer specifying the component ID.
 * 
 * @see component_delete_multiple()
 */
function component_delete($cid) {
  //return component_delete_multiple(array($cid));
  $component = component_load($cid);
  $component->delete();
}

/**
 * Deletes multiple component objects.
 * 
 * @param array $cids
 *   An array of component IDs.
 */
function component_delete_multiple($cids = array()) {
  //entity_get_controller('component')->delete($cids);
  foreach ($cids as $cid) {
    component_delete($cid);
  }
}

/**
 * Access callback for the component entity.
 */
function component_access($op, $entity_type) {
  if (user_access('administer components')) {
    return TRUE;
  }
}

// @TODO: security concerning the type and error message
function component_add_orig($type, $entity_type, $entity_id, $field_name) {
  // Check wheter the given entity_type exists
  $info = entity_get_info();
  if (!isset($info[$entity_type])) {
    return MENU_NOT_FOUND;
  }
  
  // Load the entity with the given entity_type and entity_id
  $entity = entity_load_single($entity_type, $entity_id);
  if (!$entity) {
    return MENU_NOT_FOUND;
  }
  
  // Ensure the given entity is of a bundle that has an instance of the field
  list($id, $rev_id, $bundle) = entity_extract_ids($entity_type, $entity);
  $instance = field_info_instance($entity_type, $field_name, $bundle);
  if (!$instance) {
    return MENU_NOT_FOUND;
  }
  
  // Check field cardinality.
  $field = field_info_field($field_name);
  $langcode = LANGUAGE_NONE;
  if (!($field['cardinality'] == FIELD_CARDINALITY_UNLIMITED || !isset($entity->{$field_name}[$langcode]) || count($entity->{$field_name}[$langcode]) < $field['cardinality'])) {
    drupal_set_message(t('No more components can be added to this field.'), 'error');
    return;
  }
  
  drupal_set_title(t('Create new %type component', array('%type' => component_type_get_label_by_type($type))), PASS_THROUGH);
  
  $component = component_create(array('type' => $type));
  
  // @TODO: check permission to create a component
  return drupal_get_form('component_form', $component, $entity_type, $entity_id, $field_name);
}

function component_add($entity_type, $entity_id, $field_name, $js = NULL, $step = NULL) {
  if ($js) {
    ctools_include('ajax');
    ctools_include('modal');
  }
  
  $form_info = array(
    'id' => 'component-add',
    'path' => 'component/add/' . $entity_type . '/' . $entity_id . '/' . $field_name . '/' . ($js ? 'ajax' : 'nojs') . '/%step',
    'show trail' => TRUE,
    'show back' => TRUE,
    'show cancel' => TRUE,
    'show return' => FALSE,
    'next callback' =>  'component_add_wizard_next',
    'finish callback' => 'component_add_wizard_finish',
    'cancel callback' => 'component_add_wizard_cancel',
    // this controls order, as well as form labels
    'order' => array(
      'start' => t('Choose component type'),
    ),
    // here we map a step to a form id.
    'forms' => array(
      // e.g. this for the step at wombat/create
      'start' => array(
        'form id' => 'component_add_start',
      ),
    ),
  );
  
  $component_id = 1;
  
  if (empty($step)) {
    // We reset the form when $step is NULL because that means they have
    // for whatever reason started over.
    component_add_cache_clear($component_id);
    $step = 'start';
  }
  
  // This automatically gets defaults if there wasn't anything saved.
  $component = component_add_cache_get($component_id);
  
  $component_types = components_get_types_names();
  
  // Make sure we can't somehow accidentally go to an invalid animal.
  if (empty($component_types[$component->type])) {
    $component->type = 'unknown';
  }
  
  // Now that we have our object, dynamically add the animal's form.
  if ($component->type == 'unknown') {
    // If they haven't selected a type, add a form that doesn't exist yet.
    $form_info['order']['unknown'] = t('Configure component');
    $form_info['forms']['unknown'] = array('form id' => 'nothing');
  }
  else {
    // Add the selected component type to the order so that it shows up properly in the trail.
    $form_info['order'][$component->type] = $component_types[$component->type];
  }
  
  foreach ($component_types as $type => $label) {
    $form_info['forms'][$type] = array(
      //'form id' => $type . '_component_ajax_form',
      'form id' => 'component_ajax_form',
      //'include' => drupal_get_path('module', 'components') . '/components.forms.inc',
    );
  }
  
  $form_state = array(
    'ajax' => $js,
    // Put our component and ID into the form state cache so we can easily find it.
    'component_id' => $component_id,
    'component' => &$component,
    'host_entity_type' => $entity_type,
    'host_entity_id' => $entity_id,
    'host_entity_field_name' => $field_name,
  );
  
  // Send this all off to our form. This is like drupal_get_form only wizardy.
  ctools_include('wizard');
  $form = ctools_wizard_multistep_form($form_info, $step, $form_state);
  $output = drupal_render($form);
  
  // If $output is FALSE, there was no actual form.
  if ($js) {
    // If javascript is active, we have to use a render array.
    $commands = array();
    if ($output === FALSE || !empty($form_state['complete'])) {
      // Dismiss the modal.
      $commands[] = ctools_modal_command_dismiss();
    }
    else if (!empty($form_state['cancel'])) {
      // If cancelling, return to the activity.
      $commands[] = ctools_modal_command_dismiss();
    }
    else {
      $commands = ctools_modal_form_render($form_state, $output);
    }
    print ajax_render($commands);
    exit;
  }
  else {
    if ($output === FALSE || !empty($form_state['complete'])) {
      return $animal;
    }
    else if (!empty($form_state['cancel'])) {
      // @TODO: change node to appropriate entity type
      drupal_goto('node/' . $entity_id);
    }
    else {
      return $output;
    }
  }
}

/**
 * Store our little cache so that we can retain data from form to form.
 */
function component_add_cache_set($id, $component) {
  ctools_include('object-cache');
  ctools_object_cache_set('component_add', $id, $component);
}

/**
 * Get the current object from the cache, or default.
 */
function component_add_cache_get($id) {
  ctools_include('object-cache');
  $component = ctools_object_cache_get('component_add', $id);
  if (!$component) {
    // Create a default component.
    $component = new stdClass();
    $component->type = 'unknown';
  }

  return $component;
}

/**
 * Clear the wizard cache.
 */
function component_add_cache_clear($id) {
  ctools_include('object-cache');
  ctools_object_cache_clear('component_add', $id);
}

/**
 * Handle the 'next' click on the add/edit pane form wizard.
 *
 * All we need to do is store the updated pane in the cache.
 */
function component_add_wizard_next(&$form_state) {
  component_add_cache_set($form_state['component_id'], $form_state['component']);
}

/**
 * Handle the 'finish' click on teh add/edit pane form wizard.
 *
 * All we need to do is set a flag so the return can handle adding
 * the pane.
 */
function component_add_wizard_finish(&$form_state) {
  $form_state['complete'] = TRUE;
}

/**
 * Handle the 'cancel' click on the add/edit pane form wizard.
 */
function component_add_wizard_cancel(&$form_state) {
  $form_state['cancel'] = TRUE;
}

function component_add_start($form, &$form_state) {
  $form_state['title'] = t('Choose component type');
  $options = array();
  
  foreach (components_get_types_names() as $type => $label) {
    $options[$type] = $label;
  }
  
  $form['type'] = array(
    '#title' => t('Choose component type'),
    '#type' => 'radios',
    '#options' => $options,
    '#default_value' => $form_state['component']->type,
    '#required' => TRUE,
  );
  
  return $form;
}

function component_add_start_submit(&$form, &$form_state) {
  $form_state['component']->type = $form_state['values']['type'];
  // Override where to go next based on the component type selected.
  $form_state['clicked_button']['#next'] = $form_state['values']['type'];
}

function component_edit($component) {
  drupal_set_title(t('Edit %type component', array('%type' => component_type_get_label_by_type($component->type))), PASS_THROUGH);
  return drupal_get_form('component_form', $component);
}

/**
 * Generate an array for rendering the given component.
 * 
 * @param $component
 *   A component object.
 * @param $view_mode
 *   View mode, e.g. 'default', 'rss', ...
 * @param $langcode
 *   (optional) A language code to use for rendering. Defaults to the global
 *   content language of the current request.
 * 
 * @return
 *   An array as expected by drupal_render().
 */
function component_view($component, $view_mode = 'default', $langcode = NULL) {
  if (!isset($langcode)) {
    $langcode = $GLOBALS['language_content']->language;
  }
  
  $build = $component->buildContent($view_mode, $langcode);
  
  $build += array(
    '#theme' => 'component',
    '#component' => $component,
    '#view_mode' => $view_mode,
    '#language' => $langcode,
  );
  
  // Allow modules to modify the structured component.
  drupal_alter(array('component_view', 'entity_view'), $build, $component->entityType());
  
  return $build;
}

/**
 * Process variables for component.tpl.php
 * 
 * The default component.tpl.php is located
 * inside "MODULE-PATH/theme/component.tpl.php".
 * Look in there for the full list of variables.
 * 
 * The $vars array contains the following arguments:
 * - $component
 * - $view_mode
 * 
 * @see component.tpl.php
 */
function template_preprocess_component(&$vars) {
  $elements = &$vars['elements'];
  $component = $elements['#component'];
  
  $vars['component'] = $component;
  $vars['view_mode'] = $elements['#view_mode'];
  
  // Flatten the component's member fields
  $vars = array_merge((array) $component, $vars);
  
  // Helpful $content variable for templates
  foreach (element_children($elements) as $key) {
    $vars['content'][$key] = $elements[$key];
  }
  
  // Make the field variables available with the appropriate language
  field_attach_preprocess('component', $component, $vars['content'], $vars);
  
  // Gather classes
  $vars['classes_array'][] = drupal_html_class('component-' . $component->type);
  if (!$vars['status']) {
    $vars['classes_array'][] = 'component-unpublished';
  }
  
  // Clean up name so there are no underscores
  $vars['theme_hook_suggestions'][] = 'component__' . $component->type;
  $vars['theme_hook_suggestions'][] = 'component__' . $component->cid;
}

/****************************/
/* COMPONENT_TYPE functions */
/****************************/

/**
 * Creates a new component type object.
 * 
 * @param array $values
 */
function component_type_create(array $values) {
  return new ComponentType($values);
}

/**
 * Saves a component type object.
 * 
 * @param ComponentType $component_type
 *   A component type object.
 */
function component_type_save(ComponentType $component_type) {
  return $component_type->save();
}

/**
 * Loads a component type object.
 * 
 * @param string $type
 *   The machine-readable name of a component type to load.
 * @return ComponentType
 * 	 A component type object or FALSE if it cannot be found.
 * 
 * @see component_type_load_multiple()
 */
function component_type_load($type) {
  /*$types = isset($type) ? array($type) : array();
  $results = component_type_load_multiple($types);
  return $results ? reset($results) : FALSE;*/
  return components_get_types($type);
}
// @TODO: component_type_load() <- difference -> components_get_types()
/**
 * Gets an array of all component types.
 * 
 * @param string $type_name
 *   If set, the type with the given name is returned.
 * @return ComponentType[]
 *   Depending wheter $type_name isset, an array of component types or a single one.
 */
function components_get_types($type_name = NULL) {
  $types = component_type_load_multiple_by_name(isset($type_name) ? array($type_name) : FALSE);
  return isset($type_name) ? reset($types) : $types;
}

/**
 * Returns a list of available component types.
 * 
 * @return
 *   An array of component type labels, keyed by the type.
 */
function components_get_types_names() {
  $results = array();
  $types = component_type_load_multiple(FALSE);
  foreach ($types as $type) {
    $results[$type->type] = $type->label;
  }
  asort($results);
  return $results;
}

/**
 * Loads multiple component type objects.
 * 
 * @param array $types
 *   An array of component types.
 * @param array $conditions
 *   An array of conditions to match against the {component_type} table.
 * @param boolean $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return ComponentType[]
 *   An array of component type objects.
 */
function component_type_load_multiple($types = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('component_type', $types, $conditions, $reset);
}

/**
 * Loads multiple component type objects.
 * 
 * @param array $types
 *   An array of component types.
 * @return ComponentType[]
 *   An array of component type objects.
 */
function component_type_load_multiple_by_name($types = array()) {
  return entity_load_multiple_by_name('component_type', $types);
}

/**
 * Deletes a component type object.
 * 
 * @param string $type
 *   The type of the component type.
 * 
 * @see component_type_delete_multiple()
 */
function component_type_delete($type) {
  return component_delete_multiple(array($type));
}

/**
 * Deletes multiple component type objects.
 * 
 * @param array $cids
 *   An array of component type types.
 */
function component_type_delete_multiple($types = array()) {
  entity_get_controller('component_type')->delete($types);
}

/**
 * Access callback for the component type entity.
 */
/*function component_type_access($op, $entity_type) {
  if (user_access('administer component types')) {
    return TRUE;
  }
}*/
function component_type_access($op, $type = NULL, $account = NULL) {
  return user_access('administer component types', $account);
}

/**
 * Return the label of a component type by type.
 * 
 * @param string $type
 *   The type of a component type.
 * @return
 *   The label of a component type or FALSE if it cannot be found.
 */
function component_type_get_label_by_type($type) {
  $component_type = component_type_load($type);
  
  return ($component_type) ? $component_type->label : FALSE;
}

/*********/
/* THEME */
/*********/

function components_theme() {
  return array(
    'component' => array(
      'render element' => 'elements',
      'path' => drupal_get_path('module', 'components') . '/theme',
      'template' => 'component',
    ),
    'components_popup' => array(
      'render element' => 'element',
      'path' => drupal_get_path('module', 'components') . '/theme',
      'template' => 'components-popup',
    ),
  );
}

/***********/
/* CLASSES */
/***********/

/**
 * Component class
 */
class Component extends Entity {
  
  /*public $cid;*/
  public $type;
  public $status;
  
  public $host_entity_type;
  public $host_entity_id;
  public $host_entity_field_name;
  
  public function __construct($values = array()) {
    if (isset($values['type']) && is_object($values['type'])) {
      $values['type'] = $values['type']->type;
    }
    
    if (!isset($values['status'])) {
      $values['status'] = TRUE;
    }
    
    parent::__construct($values, 'component');
  }
  
  /**
   * Returns the associated component type object.
   * 
   * @return ComponentType
   */
  public function type() {
    return component_type_load($this->type);
  }
  
  public function defaultUri() {
    $cid = $this->identifier();
    return ($cid) ? array('path' => 'component/' . $this->identifier()) : NULL;
  }
  
  public function save() {
    if (empty($this->is_new)) {
      $transaction = db_transaction();
      try {
        if (!(isset($this->host_entity_type)) || !(isset($this->host_entity_id)) || !(isset($this->host_entity_field_name))) {
          throw new Exception('Unable to create a component without a given host entity.');
        }
        
        // Load the host entity with the given entity_type and entity_id
        $host = entity_load_single($this->host_entity_type, $this->host_entity_id);
        if (!$host) {
          throw new Exception('Unable to create a component without a given host entity.');
        }
        
        entity_get_controller($this->entityType)->save($this, $transaction);
        
        $host->{$this->host_entity_field_name}[$host->language][] = array('cid' => $this->identifier());
        
        entity_save($this->host_entity_type, $host);
        
        return $this;
      }
      catch (Exception $e) {
        $transaction->rollback($this->entityType, $e->getMessage(), array(), WATCHDOG_ERROR);
        return FALSE;
      }
    }
    else {
      return entity_get_controller($this->entityType)->save($this);
    }
  }
  
  public function delete() {
    $id = $this->identifier();
    
    parent::delete();
    
    // Delete all references to this component
    if ($fields = components_get_field_instances()) {
      foreach ($fields as $field_name => $entity_data) {
        $query = new EntityFieldQuery();
        $query->fieldCondition($field_name, 'cid', $id, '=');
        $results = $query->execute();
        
        foreach ($results as $entity_type => $entities) {
          foreach ($entities as $entity_id => $entity_values) {
            $entity = entity_load_single($entity_type, $entity_id);
            foreach ($entity->{$field_name} as $lang => &$data) {
              foreach ($data as $delta => $item) {
                if ($item['cid'] == $id) {
                  unset($data[$delta]);
                }
              }
            }
            entity_save($entity_type, $entity);
          }
        }
      }
    }
  }
  
  public function buildContent($view_mode = 'default', $langcode = NULL) {
    $content = array();
    // Assume newly create objects are still empty.
    if (!empty($this->is_new)) {
      $content['empty']['#markup'] = '<em class="component-no-data">' . t('There is no component data available yet.') . '</em>';
    }
    return entity_get_controller($this->entityType)->buildContent($this, $view_mode, $langcode, $content); 
  }
  
}

/**
 * ComponentType class
 */
class ComponentType extends Entity {
  
  public $type;
  public $label;
  public $description;
  
  public function __construct($values = array()) {
    parent::__construct($values, 'component_type');
  }
  
  /**
   * Returns whether the component type is locked, thus may not be deleted or renamed.
   *
   * Component types provided in code are automatically treated as locked, as well
   * as any fixed component type.
   */
  public function isLocked() {
    return isset($this->status) && empty($this->is_new) && (($this->status & ENTITY_IN_CODE) || ($this->status & ENTITY_FIXED));
  }
  
}
