<?php

/**
 * @file
 * Module file for the Components Group module.
 */

define('COMPONENTS_GROUP', 'components_group');

// TEMPORARY solution ???
module_load_include('inc', 'components_group', 'components_group.admin');

/**
 * Implements hook_help().
 */
function components_group_help($path, $arg) {
  switch ($path) {
    case 'admin/help#components-group':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      // @TODO: write help documentation
      return $output;
      break;
  }
}

/**
 * Implements hook_menu().
 */
function components_group_menu() {
  $items = array();
  
  // Ensure the following is not executed until field_bundles is working and
  // tables are updated. Needed to avoid errors on initial installation.
  if (defined('MAINTENANCE_MODE')) {
    return $items;
  }
  
  // Create tabs for all possible bundles.
  foreach (entity_get_info() as $entity_type => $entity_info) {
    if ($entity_info['fieldable']) {
      foreach ($entity_info['bundles'] as $bundle_name => $bundle_info) {
        if (isset($bundle_info['admin'])) {
          // Extract path information from the bundle.
          $path = $bundle_info['admin']['path'];
          // Different bundles can appear on the same path (e.g. %node_type and
          // %comment_node_type). To allow components_group_menu_load() to extract the
          // actual bundle object from the translated menu router path
          // arguments, we need to identify the argument position of the bundle
          // name string ('bundle argument') and pass that position to the menu
          // loader. The position needs to be casted into a string; otherwise it
          // would be replaced with the bundle name string.
          if (isset($bundle_info['admin']['bundle argument'])) {
            $bundle_arg = $bundle_info['admin']['bundle argument'];
            $bundle_pos = (string) $bundle_arg;
          }
          else {
            $bundle_arg = $bundle_name;
            $bundle_pos = '0';
          }
          // This is the position of the %components_group_menu placeholder
          // in the items below.
          $field_position = count(explode('/', $path)) + 1;

          // Extract access information, providing defaults.
          $access = array_intersect_key($bundle_info['admin'], drupal_map_assoc(array('access callback', 'access arguments')));
          $access += array(
            'access callback' => 'user_access',
            'access arguments' => array('administer site configuration'),
          );
          
          $items[$path . '/components-groups/%components_group'] = array(
            'title callback' => 'components_group_menu_title',
            'title arguments' => array($field_position),
            'page callback' => 'drupal_get_form',
            'page arguments' => array('components_group_edit_form', $field_position),
            //'file' => 'components_group.admin.inc',
          ) + $access;
          
          $items[$path . '/components-groups/%components_group/edit'] = array(
            'title' => 'Edit',
            'page callback' => 'drupal_get_form',
            'page arguments' => array('components_group_edit_form', $field_position),
            'type' => MENU_DEFAULT_LOCAL_TASK,
            //'file' => 'components_group.admin.inc',
          ) + $access;
          
          $items[$path . '/components-groups/%components_group/delete'] = array(
            'title' => 'Delete',
            'page callback' => 'drupal_get_form',
            'page arguments' => array('components_group_delete_form', $field_position),
            'type' => MENU_LOCAL_TASK,
            //'file' => 'components_group.admin.inc',
            'weight' => 1,
          ) + $access;
        }
      }
    }
  }
  
  return $items;
}

/**
 * Menu title callback.
 */
function components_group_menu_title($components_group) {
  return $components_group->label;
}

/**
 * Implements hook_entity_info().
 */
function components_group_entity_info() {
  $entity_info = array();
  
  $entity_info[COMPONENTS_GROUP] = array(
    'label' => t('Components Group'),
    'entity class' => 'ComponentsGroup',
    //'controller class' => 'EntityAPIController',
    'controller class' => 'EntityAPIControllerExportable',
    'base table' => 'components_group',
    'fieldable' => FALSE,
    'view modes' => array(),
    'exportable' => TRUE,
    'entity keys' => array(
      'id' => 'cgid',
      'label' => 'label',
    ),
    'bundles' => array(),
    'label callback' => 'entity_class_label',
    'uri callback' => 'entity_class_uri',
    'access callback' => 'components_group_access',
    'module' => 'components_group',
  );
  
  return $entity_info;
}

/**
 * Implements hook_permission().
 */
function components_group_permission() {
   return array(
     'administer components groups' => array(
       'title' => t('Administer components groups'),
       'description' => t('Edit and view all components groups.')
     ),
  );
}

/******************************/
/* COMPONENTS GROUP functions */
/******************************/

/**
 * Creates a new Components Group object.
 * 
 * @param array $values
 */
function components_group_create(array $values) {
  return new ComponentsGroup($values);
}

/**
 * Saves a Components Group object.
 * 
 * @param ComponentsGroup $components_group
 *   A Components Group object.
 */
function components_group_save(ComponentsGroup $components_group) {
  return $components_group->save();
}

/**
 * Load a Components Group object.
 * 
 * @param integer $cgid
 *   Integer specifying the Components Group ID.
 * @param boolean $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return ComponentsGroup
 *   A Components Group object or FALSE if it cannot be found.
 */
function components_group_load($cgid, $reset = FALSE) {
  $ids = isset($cgid) ? array($cgid) : array();
  $results = components_group_load_multiple($ids, $reset);
  return $results ? reset($results) : FALSE;
}

/**
 * Loads multiple Components Group objects.
 * 
 * @param array $cgids
 *   An array of Components Group IDs.
 * @param boolean $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return ComponentsGroup[]
 *   An array of Components Group objects.
 * 
 * @see entity_load()
 * @see components_group_load()
 */
function components_group_load_multiple($cgids = array(), $reset = FALSE) {
  return entity_load(COMPONENTS_GROUP, $cgids, array(), $reset);
}

/**
 * Loads multiple Components Group objects by their entity and bundle.
 * 
 * @param $entity_type
 *   The entity type of the Component Group.
 * @param $bundle
 *   The bundle of the Components Group.
 * @param boolean $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return ComponentsGroup[]
 *   An array of Components Group objects.
 * 
 * @see components_group_load_multiple()
 */
function components_group_load_by_entity_type_bundle($entity_type, $bundle, $reset = FALSE) {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'components_group', '=')
    ->propertyCondition('entity_type', $entity_type, '=')
    ->propertyCondition('bundle', $bundle, '=');
  
  $components_group_ids = array();
  if ($result = $query->execute()) {
    $components_group_ids = array_keys($result['components_group']);
  }
  return components_group_load_multiple($components_group_ids, $reset);
}

/**
 * Deletes a Components Group object.
 * 
 * @param integer $cgid
 *   Integer specifying the Components Group ID.
 * 
 * @see components_group_delete_multiple()
 */
function components_group_delete($cgid) {
  $components_group = components_group_load($cgid);
  $components_group->delete();
}

/**
 * Deletes multiple Components Group objects.
 * 
 * @param array $cgids
 *   An array of Components Group IDs.
 */
function components_group_delete_multiple($cgids = array()) {
  foreach ($cgids as $cgid) {
    components_group_delete($cgid);
  }
}

/**
 * Access callback for the Components Group entity.
 */
function components_group_access($op, $entity_type) {
  if (user_access('administer components groups')) {
    return TRUE;
  }
}

/**
 * Generate an array for rendering the given Components Group.
 * 
 * @param $components_group
 *   A Components Group object.
 * 
 * @return
 *   An array as expected by drupal_render().
 */
function components_group_view($components_group, $host_entity_type, $host_entity_id, $host_view_mode) {
  $build = $components_group->buildContent();
  
  $build += array(
    '#theme' => 'components_group',
    '#components_group' => $components_group,
    '#host_entity_type' => $host_entity_type,
    '#host_entity_id' => $host_entity_id,
  );
  
  // If the view mode is full and there are no settings for it,
  // change the view mode to default and try again.
  if ($host_view_mode == 'full') {
    if (!isset($components_group->data['display'][$host_view_mode])) {
      $host_view_mode = 'default';
    }
  }
  
  // Try to get the weight for this components group specifically for the given view mode.
  if (isset($components_group->data['display'][$host_view_mode]['weight'])) {
    $build += array(
      '#weight' => $components_group->data['display'][$host_view_mode]['weight'],
    );
  }
  
  return $build;
}

/**
 * Process variables for components-group.tpl.php
 * 
 * The default components-group.tpl.php is located
 * inside "MODULE-PATH/theme/components-group.tpl.php".
 * Look in there for the full list of variables.
 * 
 * The $vars array contains the following arguments:
 * - $components_group
 * 
 * @see components-group.tpl.php
 */
function template_preprocess_components_group(&$vars) {
  $elements = &$vars['elements'];
  $components_group = $elements['#components_group'];
  $components_group_id = $components_group->identifier();
  $host_entity_type = $elements['#host_entity_type'];
  $host_entity_id = $elements['#host_entity_id'];
  
  $vars['components_group'] = $components_group;
  $vars['components'] = NULL;
  
  // Flatten the Components Group's member fields
  $vars = array_merge((array) $components_group, $vars);
  
  // Id
  $vars['id'] = drupal_html_class($components_group->name());
  // @TODO: should we use drupal_html_id() instead of drupal_html_class()?
  
  // Components
  $components = component_load_all_by_host($host_entity_type, $host_entity_id, $components_group_id);
  if (is_array($components) && count($components) > 0) {
    $vars['components'] = array();
    foreach ($components as $component) {
      $vars['components'][] = component_view($component);
    }
  }
  
  // Include the CTools tools that we need.
  ctools_include('ajax');
  ctools_include('modal');
  // Add CTools' javascript to the page.
  ctools_modal_add_js();
  // Create our own javascript that will be used to theme a modal.
  $modal_style = array(
    'components-style' => array(
      'modalSize' => array(
        'type' => 'scale',
        'width' => .8,
        'height' => .8,
        'addWidth' => 0,
        'addHeight' => 0,
        'contentRight' => 25,
        'contentBottom' => 45,
      ),
      'modalOptions' => array(
        'opacity' => .8,
        'background-color' => '#000',
      ),
      'animation' => 'fadeIn',
      'modalTheme' => 'ComponentsModal',
      'throbber' => theme('image', array('path' => ctools_image_path('ajax-loader.gif', 'ctools_ajax_sample'), 'alt' => t('Loading...'), 'title' => t('Loading'))),
    ),
  );
  drupal_add_js($modal_style, 'setting');
  ctools_add_js('components', 'components');
  ctools_add_css('components', 'components');
  
  if (module_exists('contextual')) {
    $links = array();
    // Normally we must use ctools_modal_text_button() to create this link,
    // but this is not compatible with the link structure for contextual links.
    $links[] = array( 
      'title' => t('Add component'),
      'href' => 'component/add/' . $host_entity_type . '/' . $host_entity_id . '/' . $components_group_id . '/nojs',
      'html' => TRUE,
      'attributes' => array(
        'class' => array('ctools-modal-components-style', 'ctools-use-modal'),
        'title' => t('Add component'),
      ),
    );
    
    $vars['contextual_links'] = array(
      '#theme' => 'links__contextual',
      '#links' => $links,
      '#attributes' => array('class' => array('contextual-links')),
      '#attached' => array(
        'library' => array(array('contextual', 'contextual-links')),
      ),
      '#prefix' => '<div class="contextual-links-wrapper">',
      '#suffix' => '</div>',
    );
    
    $vars['classes_array'][] = 'contextual-links-region';
  }
  else {
    $vars['contextual_links'] = NULL;
    $vars['contextual_links'] = array(
      '#markup' => ctools_modal_text_button(
        t('Add component'),
        'component/add/' . $host_entity_type . '/' . $host_entity_id . '/' . $components_group_id . '/nojs',
        t('Add component'),
        'ctools-modal-components-style'
      ),
      '#prefix' => '<div class="contextual-links-wrapper">',
      '#suffix' => '</div>',
    );
  }
}

/*********/
/* THEME */
/*********/

/**
 * Implements hook_theme().
 */
function components_group_theme() {
  return array(
    'components_group' => array(
      'render element' => 'elements',
      'template' => 'components-group',
      'path' => drupal_get_path('module', 'components_group') . '/theme',
    ),
  );
}

/*********/
/* CLASS */
/*********/

/**
 * Components Group class
 */
class ComponentsGroup extends Entity {
  
  public $cgid;
  public $label;
  public $entity_type;
  public $bundle;
  
  public function __construct($values = array()) {
    parent::__construct($values, 'components_group');
  }
  
  public function defaultUri() {
    $cgid = $this->identifier();
    return ($cgid) ? array('path' => 'components-group/' . $cgid) : NULL;
  }
  
  public function name() {
    return ($id = $this->identifier()) ? 'components_group_' . $id : NULL;
  }
  
}
