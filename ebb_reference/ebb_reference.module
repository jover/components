<?php

/**
 * @file
 * Defines a field type for referencing an Entity Building Block from another entity.
 * 
 * This module is based on the Node Reference module (part of the References module):
 * @link http://drupal.org/project/references
 */

/**
 * Implements hook_help().
 */
function ebb_reference_help($path, $arg) {
  switch ($path) {
    case 'admin/help#entity-building-blocks-reference':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('The Entity Building Blocks reference module provides a field to which an Entity Building Block can be attached.') . '</p>';
      return $output;
      break;
  }
}

/************************/
/* Field Type API hooks */
/************************/

/**
 * Implements hook_field_info().
 */
function ebb_reference_field_info() {
  return array(
    'ebb_reference' => array(
      'label' => t('Entity Building Block reference'),
      'description' => t('This field stores the ID of a related Entity Building Block.'),
      'instance_settings' => array(
        'referenceable_types' => array(),
        'view' => array(
          'view_name' => '',
          'display_name' => '',
          'args' => array(),
        ),
      ),
      'settings' => array(),
      'default_widget' => 'ebb_reference_ebbid',
      'default_formatter' => 'ebb_reference_ebb',
      // Add entity property info
      'property_type' => 'ebb',
    ),
  );
}

/**
 * Implements hook_field_settings_form().
 */
function ebb_reference_field_settings_form($field, $instance, $has_data) {
  $settings = $instance['settings'];
  
  $form = array();
  $form['referenceable_types'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Entity Building Block Types that can be referenced'),
    '#multiple' => TRUE,
    '#default_value' => $settings['referenceable_types'],
    '#options' => ebb_get_types_names(),
  );
  
  return $form;
}

/**
 * Implements hook_field_validate().
 */
function ebb_reference_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, $errors) {
  foreach ($items as $delta => $item) {
    if (!empty($item['ebbid']) && !is_numeric($item['ebbid'])) {
      $errors[$field['field_name']][$langcode][$delta][] = array(
        'error' => 'ebb_reference_ebbid_invalid',
        'message' => t('%label: invalid input.', array('%label' => $instance['label'])),
      );
    }
  }
}

/**
 * Implements hook_field_is_empty().
 */
function ebb_reference_field_is_empty($item, $field) {
  return empty($item['ebbid']);
}

/*****************************/
/* Field Type API: Formatter */
/*****************************/

/**
 * Implements hook_field_formatter_info().
 */
function ebb_reference_field_formatter_info() {
  return array(
    'ebb_reference_ebb' => array(
      'label' => t('Rendered Entity Building Block'),
      'description' => t('Display the referenced Entity Building Block in a specific view mode'),
      'field types' => array('ebb_reference'),
      'settings' => array(
      	'ebb_reference_view_mode' => 'full',
      ),
    ),
  );
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function ebb_reference_field_formatter_settings_form($field, $instance, $view_mode, $form, $form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  //$settings = $display['instance_settings'];
  //$settings = $instance['settings'];
  
  // Only build this information for ebb_reference_ebb displays
  if ($display['type'] !== 'ebb_reference_ebb') {
    return NULL;
  }
  
  $entity_info = entity_get_info('ebb');
  $view_modes = $entity_info['view modes'];
  $options = array();
  
  foreach ($view_modes as $name => $mode) {
    $options[$name] = $mode['label'];
  }
  
  $element['ebb_reference_view_mode'] = array(
    '#title' => t('View mode'),
    '#type' => 'select',
    '#options' => $options,
    '#default_value' => $settings['ebb_reference_view_mode'],
    // Never empty, so no #empty_option
  );
  
  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function ebb_reference_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  //$settings = $display['instance_settings'];
  //$settings = $instance['settings'];
  
  if ($display['type'] === 'ebb_reference_ebb') {
    $entity_info = entity_get_info('ebb');
    $view_modes = $entity_info['view modes'];
    $mode = $view_modes[$settings['ebb_reference_view_mode']]['label'];
    $summary = t('View mode: %view_mode', array('%view_mode' => $mode));
  }
  else {
    $summary = NULL;
  }
  return $summary;
}

/**
 * Implements hook_field_formatter_view().
 */
function ebb_reference_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $result = array();
  $settings = $display['settings'];
  //$settings = $display['instance_settings'];
  //$settings = $instance['settings'];
  
  switch ($display['type']) {
    case 'ebb_reference_ebb':
      $view_mode = $settings['ebb_reference_view_mode'];
      foreach ($items as $delta => $item) {
        $result[$delta]['#markup'] = '<p>' . $item['ebbid'] . '</p>';
      }
      break;
  }
  
  return $result;
}

/**************************/
/* Field Type API: Widget */
/**************************/

/**
 * Implements hook_field_widget_info().
 */
function ebb_reference_field_widget_info() {
  return array(
    'ebb_reference_ebbid' => array(
      'label' => t('Entity Building Block ID'),
      'field types' => array('ebb_reference'),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 */
function ebb_reference_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $base = $element;
  
  switch ($instance['widget']['type']) {
    case 'ebb_reference_ebbid':
      $element['ebbid'] = array(
        '#type' => 'textfield',
        '#title' => t('Entity Building Block ID'),
        '#default_value' => isset($items[$delta]['ebbid']) ? $items[$delta]['ebbid'] : NULL,
      ) + $base;
      break;
  }
  
  return $element;
}

/**
 * Implements hook_field_widget_error().
 */
function ebb_reference_field_widget_error($element, $error, $form, $form_state) {
  switch ($error['error']) {
    case 'ebb_reference_ebbid_invalid':
      $error_element = $element;
      break;
    default:
      $error_element = $element;
      break;
  }
  form_error($error_element, $error['message']);
}

/*********/
/* OTHER */
/*********/

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ebb_reference_form_field_ui_field_edit_form_alter(&$form, &$form_state) {
  if ($form['#field']['type'] == 'ebb_reference') {
    // Set the cardinality of the field settings to UNLIMITED by default.
    $form['field']['cardinality']['#default_value'] = FIELD_CARDINALITY_UNLIMITED;
  }
}
