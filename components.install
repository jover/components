<?php

/**
 * @file
 * Install, update and uninstall functions for the components module.
 */

/**
 * Implements hook_schema().
 */
function components_schema() {
  $schema['component'] = array(
    'description' => 'The base table for components.',
    'fields' => array(
      'cid' => array(
        'description' => 'The primary identifier for a component.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'type' => array(
        'description' => 'The {component_type}.type of a component.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
      ),
      'view_mode' => array(
        'description' => 'The default view mode of a component.',
        'type' => 'varchar',
        'length' => 255, // @TODO: check length
        'not null' => FALSE,
        'default' => '',
      ),
      'host_entity_type' => array(
        'description' => 'The host entity type of a component.',
        'type' => 'varchar',
        'length' => 255, // @TODO: check length
        'not null' => FALSE,
        'default' => '',
      ),
      'host_entity_id' => array(
        'description' => 'The ID of the host entity of a component.',
        'type' => 'int',
        'not null' => FALSE,
        'default' => 0,
      ),
      'host_entity_field_name' => array(
        'description' => 'The field name of the host entity which holds a component.',
        'type' => 'varchar',
        'length' => 255, // @TODO: check length
        'not null' => FALSE,
        'default' => '',
      ),
      'status' => array(
        'description' => 'Boolean indicating whether a component is published (visible to non-administrators).',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 1,
        'size' => 'tiny',
      ),
    ),
    'foreign keys' => array(
      'type' => array(
        'table' => 'component_type',
        'columns' => array('type' => 'type'),
      ),
    ),
    'primary key' => array('cid'),
  );
  
  $schema['component_type'] = array(
    'description' => 'Stores information about all defined {component} types.',
    'fields' => array(
      'id' => array( // Required for internal use of the EntityAPI
        'description' => 'The primary identifier for a component type.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'type' => array(
        'description' => 'The machine-readable name of this type.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
      ),
      'label' => array(
        'description' => 'The human-readable name of this type.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'translatable' => TRUE,
      ),
      'description' => array(
        'description' => 'A brief description of this type.',
        'type' => 'text',
        'not null' => TRUE,
        'size' => 'medium',
        'translatable' => TRUE,
      ),
    ) + entity_exportable_schema_fields(),
    'primary key' => array('id'),
    'unique keys' => array(
      'type' => array('type'),
      'label' => array('label'),
    ),
  );
  
  return $schema;
}

/**
 * Implements hook_field_schema().
 */
function components_field_schema($field) {
  return array(
    'columns' => array(
      'cid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
      ),
      'view_mode' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
      ),
    ),
    'indexes' => array('cid' => array('cid')),
    'foreign keys' => array(
      'cid' => array(
        'table' => 'component',
        'columns' => array('cid' => 'cid'),
      ),
    ),
  );
}

/**
 * Implements hook_install().
 */
function components_install() {
  
}

/**
 * Implements hook_uninstall().
 */
function components_uninstall() {
  // Delete all field instances of all component types
  foreach (field_info_instances('component') as $bundle => $bundle_instances) {
    foreach ($bundle_instances as $field_name => $instance) {
      field_delete_instance($instance);
    }
  }
  
  // Delete all field instances of type "component_reference", their data and the field itself
  foreach (field_info_instances() as $entity_type => $type_bundles) {
    foreach ($type_bundles as $bundle => $bundle_instances) {
      foreach ($bundle_instances as $field_name => $instance) {
        $field = field_info_field($field_name);
        if ($field['type'] == 'component_reference') {
          field_delete_field($field_name);
        }
      }
    }
  }
  
  // Purge all field information
  field_purge_batch(1000);
}
