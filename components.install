<?php

/**
 * @file
 * Install, update and uninstall functions for the components module.
 */

/**
 * Implements hook_schema().
 */
function components_schema() {
  $schema['component'] = array(
    'description' => 'The base table for components.',
    'fields' => array(
      'cid' => array(
        'description' => 'The primary identifier for a component.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'type' => array(
        'description' => 'The {component_type}.type of this component.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
      ),
      'status' => array(
        'description' => 'Boolean indicating whether the component is published (visible to non-administrators).',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 1,
        'size' => 'tiny',
      ),
    ),
    'foreign keys' => array(
      'type' => array(
        'table' => 'component_type',
        'columns' => array('type' => 'type'),
      ),
    ),
    'primary key' => array('cid'),
  );
  
  $schema['component_type'] = array(
    'description' => 'Stores information about all defined {component} types.',
    'fields' => array(
      'id' => array( // Required for internal use of the EntityAPI
        'description' => 'The primary identifier for a component type.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'type' => array(
        'description' => 'The machine-readable name of this type.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
      ),
      'label' => array(
        'description' => 'The human-readable name of this type.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'translatable' => TRUE,
      ),
      'description' => array(
        'description' => 'A brief description of this type.',
        'type' => 'text',
        'not null' => TRUE,
        'size' => 'medium',
        'translatable' => TRUE,
      ),
    ) + entity_exportable_schema_fields(),
    'primary key' => array('id'),
    'unique kyes' => array(
      'type' => array('type'),
      'label' => array('label'),
    ),
  );
  
  return $schema;
}

/**
 * Implements hook_install().
 */
function components_install() {
  // Create all the fields
  foreach (_components_type_installed_fields() as $field) {
    field_create_field($field);
  }
  
  // Create all the field instances
  foreach (_components_type_installed_instances() as $instance) {
    field_create_instance($instance);
  }
}

/**
 * Implements hook_uninstall().
 */
function components_uninstall() {
  // Delete all field instances defined by this module, their data and the field itself
  foreach (array_keys(_components_type_installed_fields()) as $field_name) {
    field_delete_field($field_name);
  }
  
  // Delete all field instances attached to the entity types defined by this module
  $instances = array();
  $instances = array_merge($instances, field_info_instances('component'));
  $instances = array_merge($instances, field_info_instances('component_type'));
  foreach ($intances as $instance_name => $instance) {
    field_delete_instance($instance);
  }
  
  // Purge all field information
  field_purge_batch(1000);
}

/**
 * Return a structured array defining the fields created by this module
 */
function _components_type_installed_fields() {
  $fields = array();
  
  // Create an image field named "Sample Image", enabled for the 'component_type' entity.
  $fields['field_component_type_image'] = array(
    'field_name' => 'field_component_type_image',
    'label' => t('Sample Image'),
    'type' => 'image',
    'entity_types' => array('component_type'),
    'cardinality' => 1,
    'translatable' => TRUE,
    'locked' => TRUE,
    'indexes' => array('fid' => array('fid')),
    'settings' => array(
      'uri_scheme' => 'public',
      'default_image' => FALSE,
    ),
    'storage' => array(
      'type' => 'field_sql_storage',
      'settings' => array(),
    ),
  );
  
  return $fields;
}

/**
 * Return a structured array defining the field instances created by this module
 */
function _components_type_installed_instances() {
  $instances = array();
  
  // Create an instance of the image field "Sample Image"
  $instances['field_component_type_image'] = array(
    'field_name' => 'field_component_type_image',
    'label' => t('Sample Image'),
    'entity_type' => 'component_type',
    'bundle' => 'component_type',
    'description' => t('Upload a sample image for this component type.'),
    'required' => FALSE,
    'settings' => array(
      'file_directory' => 'field/image',
      'file_extensions' => 'png gif jpg jpeg',
      'max_filesize' => '',
      'max_resolution' => '',
      'min_resolution' => '',
      'alt_field' => TRUE,
      'title_field' => '',
    ),
    'widget' => array(
      'type' => 'image_image',
      'settings' => array(
        'progress_indicator' => 'throbber',
        'preview_image_style' => 'thumbnail',
      ),
      'weight' => -1,
    ),
    'display' => array(
      'default' => array(
        'label' => 'hidden',
        'type' => 'image',
        'settings' => array('image_style' => 'large', 'image_link' => ''),
        'weight' => -1,
      ),
    ),
  );
  
  return $instances;
}
