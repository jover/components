<?php

/**
 * @file
 * Module file for the Entity Building Blocks module.
 */

/**
 * Implements hook_help().
 */
function ebb_help($path, $arg) {
  switch ($path) {
    case "admin/help#entity-building-blocks":
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      // @TODO: write help documentation
      return $output;
      break;
  }
}

/**
 * Implements hook_entity_info().
 */
function ebb_entity_info() {
  $entity_info = array();
  
  $entity_info['ebb'] = array(
    'label' => t('Entity Building Block'),
    'entity class' => 'EntityBuildingBlock',
    'controller class' => 'EntityAPIController',
    'base table' => 'ebb',
    'fieldable' => TRUE,
    'view modes' => array(
      'full' => array(
        'label' => t('Full content'),
        'custom settings' => FALSE,
      ),
    ),
    'entity keys' => array(
      'id' => 'ebbid',
      'bundle' => 'type',
    ),
    'bundles' => array(),
    'bundle keys' => array(
      'bundle' => 'type',
    ),
    'label callback' => 'entity_class_label',
    'uri callback' => 'entity_class_uri',
    'access callback' => 'ebb_access',
    'module' => 'ebb',
    'metadata controller class' => 'EntityBuildingBlocksMetadataController',
  );
  
  $entity_info['ebb_type'] = array(
    'label' => t('Entity Building Block type'),
    'entity class' => 'EntityBuildingBlockType',
    'controller class' => 'EntityAPIController',
    'base table' => 'ebb_type',
    'fieldable' => TRUE,
    'bundle of' => 'ebb',
    'exportable' => TRUE,
    'entity keys' => array(
      'id' => 'id',
      'name' => 'type',
      'label' => 'label',
    ),
    'access callback' => 'ebb_type_access',
    'module' => 'ebb',
    // Enable the entity API's admin UI.
    'admin ui' => array(
      'path' => 'admin/structure/entity-building-block-types',
      'file' => 'ebb.admin.inc',
      'controller class' => 'EntityBuildingBlockTypeUIController',
    ),
  );
  
  return $entity_info;
}

/**
 * Implements hook_entity_info_alter().
 *
 * Use this hook to specify profile bundles to avoid a recursion, as loading
 * the profile types needs the entity info too.
 */
function ebb_entity_info_alter(&$entity_info) {
  foreach (ebb_get_types() as $type => $info) {
    $entity_info['ebb']['bundles'][$type] = array(
      'label' => $info->label,
      'admin' => array(
        'path' => 'admin/structure/entity-building-blocks/manage/%ebb_type',
        'real path' => 'admin/structure/entity-building-blocks/manage/' . $type,
        'bundle argument' => 4,
        'access arguments' => array('administer ebb types'),
      ),
    );
  }
}

/**
 * Implements hook_permission().
 */
function ebb_permission() {
   $permissions = array(
    'administer ebbs' => array(
      'title' => t('Administer Entity Building Blocks'),
      'description' => t('Edit and view all Entity Building Blocks.')
    ),
    'administer ebb types' => array(
      'title' => t('Administer Entity Building Block Types'), 
      'description' => t('Create and delete fields on Entity Building Blocks, and set their permissions.'),
    ),
  );
  
  // Generate per Entity Building Block type permissions.
  foreach (ebb_get_types() as $type) {
    $type_name = check_plain($type->type);
    $permissions += array(
      'edit any ' . $type_name . ' ebb' => array(
        'title' => t('%type_name: Edit own Entity Building Block', array('%type_name' => $type->label)),
      ),
      'view any ' . $type_name . ' ebb' => array(
        'title' => t('%type_name: View own Entity Building Block', array('%type_name' => $type->label)),
      ),
    );
  }
  
  return $permissions;
}

/*****************/
/* EBB functions */
/*****************/

/**
 * Creates a new EntityBuildingBlock object.
 * 
 * @param array $values
 */
function ebb_create(array $values) {
  return new EntityBuildingBlock($values);
}

/**
 * Saves an EntityBuildingBlock object.
 * 
 * @param EntityBuildingBlock $ebb
 *   An EntityBuildingBlock object.
 */
function ebb_save(EntityBuildingBlock $ebb) {
  return $ebb->save();
}

/**
 * Loads an EntityBuildingBlock object.
 * 
 * @param integer $ebbid
 *   Integer specifying the Entity Building Block ID.
 * @param boolean $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return EntityBuildingBlock
 *   An Entity Building Block object or FALSE if it cannot be found.
 * 
 * @see ebb_load_multiple()
 */
function ebb_load($ebbid, $reset = FALSE) {
  $ids = isset($ebbid) ? array($ebbid) : array();
  $results = ebb_load_multiple($ids, array(), $reset);
  return $results ? reset($results) : FALSE;
}

/**
 * Loads multiple EntityBuildingBlock objects.
 * 
 * @param array $ebbids
 *   An array of Entity Building Block IDs.
 * @param array $conditions
 *   An array of conditions to match against the {ebb} table.
 * @param boolean $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return EntityBuildingBlock[]
 *   An array of Entity Building Block objects.
 * 
 * @see entity_load()
 * @see ebb_load()
 */
function ebb_load_multiple($ebbids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('ebb', $ebbids, $conditions, $reset);
}

/**
 * Deletes an EntityBuildingBlock object.
 * 
 * @param integer $ebbid
 *   Integer specifying the Entity Building Block ID.
 * 
 * @see ebb_delete_multiple()
 */
function ebb_delete($ebbid) {
  return ebb_delete_multiple(array($ebbid));
}

/**
 * Deletes multiple EntityBuildingBlock objects.
 * 
 * @param array $ebbids
 *   An array of Entity Building Block IDs.
 */
function ebb_delete_multiple($ebbids = array()) {
  entity_get_controller('ebb')->delete($ebbids);
}

/**
 * Access callback for the Entity Building Block entity.
 */
function ebb_access($op, $entity_type) {
  if (user_access('administer ebbs')) {
    return TRUE;
  }
}

/**********************/
/* EBB_TYPE functions */
/**********************/

/**
 * Creates a new EntityBuildingBlockType object.
 * 
 * @param array $values
 */
function ebb_type_create(array $values) {
  return new EntityBuildingBlockType($values);
}

/**
 * Saves an EntityBuildingBlockType object.
 * 
 * @param EntityBuildingBlockType $ebb_type
 *   An EntityBuildingBlockType object.
 */
function ebb_type_save(EntityBuildingBlockType $ebb_type) {
  return $ebb_type->save();
}

/**
 * Loads an EntityBuildingBlockType object.
 * 
 * @param string $type
 *   The machine-readable name of an Entity Building Block Type to load.
 * @return EntityBuildingBlockType
 * 	 An Entity Building Block Type object or FALSE if it cannot be found.
 * 
 * @see ebb_type_load_multiple()
 */
function ebb_type_load($type) {
  $types = isset($type) ? array($type) : array();
  $results = ebb_type_load_multiple($types);
  return $results ? reset($results) : FALSE;
}
// @TODO: ebb_type_load() <- difference -> ebb_get_types()
/**
 * Gets an array of all Entity Building Block Types.
 * 
 * @param string $type_name
 *   If set, the type with the given name is returned.
 * @return EntityBuildingBlockType[]
 *   Depending wheter $type_name isset, an array of EntityBuildingBlockTypes or a single one.
 */
function ebb_get_types($type_name = NULL) {
  $types = ebb_type_load_multiple(isset($type_name) ? array($type_name) : FALSE);
  return isset($type_name) ? reset($types) : $types;
}

/**
 * Returns a list of available Entity Building Block Types.
 * 
 * @return
 *   An array of EntityBuildingBlockType labels, keyed by the type.
 */
function ebb_get_types_names() {
  $results = array();
  $types = ebb_type_load_multiple(FALSE);
  foreach ($types as $type) {
    $results[$type->type] = $type->label;
  }
  asort($results);
  return $results;
}

/**
 * Loads multiple EntityBuildingBlockType objects.
 * 
 * @param array $types
 *   An array of Entity Building Block Types.
 * @param array $conditions
 *   An array of conditions to match against the {ebb_type} table.
 * @param boolean $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return EntityBuildingBlockType[]
 *   An array of Entity Building Block Type objects.
 */
function ebb_type_load_multiple($types = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('ebb_type', $types, $conditions, $reset);
}

/**
 * Deletes an EntityBuildingBlockType object.
 * 
 * @param string $type
 *   The type of the EntityBuildingBlockType.
 * 
 * @see ebb_type_delete_multiple()
 */
function ebb_type_delete($type) {
  return ebb_delete_multiple(array($type));
}

/**
 * Deletes multiple EntityBuildingBlockType objects.
 * 
 * @param array $ebbids
 *   An array of EntityBuildingBlockType types.
 */
function ebb_type_delete_multiple($types = array()) {
  entity_get_controller('ebb_type')->delete($types);
}

/**
 * Access callback for the Entity Building Block Type entity.
 */
/*function ebb_type_access($op, $entity_type) {
  if (user_access('administer ebb types')) {
    return TRUE;
  }
}*/
function ebb_type_access($op, $type = NULL, $account = NULL) {
  return user_access('administer ebb types', $account);
}

/*********/
/* THEME */
/*********/

function ebb_theme() {
  return array(
    'ebb' => array(
      'render element' => 'elements',
      'path' => drupal_get_path('module', 'ebb') . '/theme',
      'template' => 'entity-building-block',
    ),
  );
}

/***********/
/* CLASSES */
/***********/

/**
 * EntityBuildingBlock class
 */
class EntityBuildingBlock extends Entity {
  
  /*public $ebbid;
  public $type;
  public $status;*/
  
  public function __construct($values = array()) {
    if (isset($values['type']) && is_object($values['type'])) {
      $values['type'] = $values['type']->type;
    }
    
    parent::__construct($values, 'ebb');
  }
  
  /**
   * Returns the associated Entity Building Block Type object.
   * 
   * @return EntityBuildingBlockType
   */
  public function type() {
    return ebb_type_load($this->type);
  }
  
  public function buildContent($view_mode = 'full', $langcode = NULL) {
    $content = array();
    // Assume newly create objects are still empty.
    if (!empty($this->is_new)) {
      $content['empty']['#markup'] = '<em class="ebb-no-data">' . t('There is no Entity Building Block data available yet.') . '</em>';
    }
    return entity_get_controller($this->entityType)->buildContent($this, $view_mode, $langcode, $content); 
  }
  
  public function save() {
    parent::save();
  }
  
}

/**
 * EntityBuildingBlockType class
 */
class EntityBuildingBlockType extends Entity {
  
  public $type;
  public $label;
  public $description;
  public $help;
  
  public function __construct($values = array()) {
    parent::__construct($values, 'ebb_type');
  }
  
  /**
   * Returns whether the Entity Building Block Type is locked, thus may not be deleted or renamed.
   *
   * Entity Building Block Types provided in code are automatically treated as locked, as well
   * as any fixed Entity Building Block Type.
   */
  public function isLocked() {
    return isset($this->status) && empty($this->is_new) && (($this->status & ENTITY_IN_CODE) || ($this->status & ENTITY_FIXED));
  }
  
}
